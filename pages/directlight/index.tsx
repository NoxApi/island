import { useThree, useFrame,Canvas,useLoader } from "react-three-fiber";
import { Vector3, Euler,Camera, HemisphereLight, PointLightHelper,SpotLight, SpotLightHelper, RectAreaLight, Vector} from "three";
import { useEffect, useRef ,useState,Suspense} from "react";
import Head from 'next/head'
import mesh from "react-three-fiber"
import styles from '@/styles/Home.module.css'
import { FBXLoader} from "three/examples/jsm/loaders/FBXLoader.js";
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';
import { Environment, OrbitControls, useAnimations,Html, Stats, TransformControls,PerspectiveCamera, PivotControls, useHelper, Point } from "@react-three/drei";
import { useFBX,useGLTF } from '@react-three/drei';
import * as THREE from "three";
import * as Gui from "lil-gui";
import { Build } from '@/components/building';
import { Safe } from '@/components/safe';
import { Syn } from '@/components/syn';
import { Capsule } from "@/components/capsule";
import { redirect } from "next/dist/server/api-utils";
import {RectAreaLightHelper} from "three/examples/jsm/helpers/RectAreaLightHelper"

export default function Home() {
    //madbox rotation island x-24 y-94 cam x -64
  useEffect(()=>{
  },[])
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
     <div className='bg-black w-[100vw] h-[100vh] cursor-grab active:cursor-grabbing '>
      <Canvas >
        <Suspense fallback={null}>
          <Island/>
        </Suspense>
      </Canvas>
     </div>
    </>
  )
}
const Island = () =>{
//loader
  const nodesloader = useLoader(GLTFLoader, 'island3.glb')['nodes'];
  const glb = useGLTF("island3.glb");
//loader

//ref
  const cameraref=useRef<any>()
  const islandref = useRef<any>()
 
  const allgroupref = useRef<any>()
  const alightref = useRef<any>()
  const dlightref = useRef<any>()
//lightref
  const sunref = useRef<any>()
  const spotlightref1 = useRef<any>()
  const spotlightref2 = useRef<any>()
  const spotlightref3 = useRef<any>()
  const spotlightref4 = useRef<any>()
  

//position variable
  let light = {alight:0,dlight:0}
  let pos ={camx:6,camy:60,camz:100}
  let objpos ={x:-2,y:24,z:6}
  let objrot ={x:3,y:-180,z:3}
  let rotatedeg={rotatex:-19,rotatey:0,rotatez:0}
  let sunrotate={rotatex:0,rotatey:0,rotatez:0}
  let islandrotate={rotatex:10,rotatey:-100,rotatez:0}
  let grouprotate={rotatex:0,rotatey:0,rotatez:0}
  const colorFormats = {
    string: '#ffffff',
    int: 0xffffff,
    object: { r: 1, g: 1, b: 1 },
    array: [ 1, 1, 1 ]
  };
//position variable

//light
    

//control
const handleWheel = (e:any) => {
    e.preventDefault();
    if(pos.camy>50){
      if (e.deltaY<0){
    pos.camz += e.deltaY / 100;
    pos.camy += e.deltaY / 200;
      }
    }
    else if(pos.camy<35){
      if (e.deltaY>0){
    pos.camz += e.deltaY / 100;
    pos.camy += e.deltaY / 200;
      }
    }
    else{
    pos.camz += e.deltaY / 100;
    pos.camy += e.deltaY / 200;
    }
  };

//gui
    const gui = new Gui.GUI()
    gui.add(pos,"camx").min(-100).max(100).step(1).name("cam-position-x")
    gui.add(pos,"camy").min(-100).max(100).step(1).name("cam-position-y")
    gui.add(pos,"camz").min(0).max(200).step(1).name("cam-position-z")
    gui.add(rotatedeg,"rotatex").min(-180).max(180).step(1).name("cam-rotation-x")
    gui.add(rotatedeg,"rotatey").min(-180).max(180).step(1).name("cam-rotation-y")
    gui.add(rotatedeg,"rotatez").min(-180).max(180).step(1).name("cam-rotation-z")
    gui.add(light,"alight").min(0).max(1).step(0.1).name("Ambient light")
    gui.add(light,"dlight").min(0).max(1).step(0.1).name("Directional light") 
    gui.addColor( colorFormats, 'int' ).name("Directional light color");
    gui.add(sunrotate,"rotatex").min(-180).max(180).step(1).name("d-light-rotate x")
    gui.add(sunrotate,"rotatez").min(-180).max(180).step(1).name("d-light-rotate z")
//gui
  useEffect(()=>{
   window.addEventListener("wheel", handleWheel);
   return () =>{ window.removeEventListener("wheel", handleWheel);
}
  })
  
  useFrame((state, delta) => {
    cameraref.current.position.copy(new THREE.Vector3(pos.camx,pos.camy,pos.camz))
    cameraref.current.rotation.x = (Math.PI/180)*rotatedeg.rotatex
    cameraref.current.rotation.y = (Math.PI/180)*rotatedeg.rotatey
    cameraref.current.rotation.z = (Math.PI/180)*rotatedeg.rotatez
    allgroupref.current!.rotation.x = (Math.PI/180)*grouprotate.rotatex
    allgroupref.current!.rotation.y = (Math.PI/180)*grouprotate.rotatey
    allgroupref.current!.rotation.z = (Math.PI/180)*grouprotate.rotatez
    alightref.current.intensity= light.alight
    dlightref.current.intensity= light.dlight
    dlightref.current.color.set(colorFormats.int)
    sunref.current.rotation.x = (Math.PI/180)*sunrotate.rotatex
    sunref.current.rotation.z = (Math.PI/180)*sunrotate.rotatez
      //control
    
  });
  const refpoint = new THREE.Vector3(0,0,0)
  const object = new THREE.Object3D();
  object.position.set(4,24,0)
  return(
  <>
  <ambientLight intensity={0.5} ref={alightref} />
  
  <group rotation={[(Math.PI/180)*0,0,(Math.PI/180)*0]} ref={sunref}>
  <directionalLight intensity={1} ref={dlightref} position={[5,65,1]} color={"#ff0000"}/>
  <mesh  position={[5,65,1]}>
      <sphereBufferGeometry args={[4, 50, 50]} wireframe={true} />
      <meshStandardMaterial  color={"#ff0000"} />
  </mesh>
  </group>
  <PerspectiveCamera makeDefault={true}  ref={cameraref} />
 
  <group ref = {allgroupref} >
  <Build position={{x:14,y:25.8,z:8}} rotation={{x:8,y:260,z:-2}}/>
  <Safe position={{x:-13,y:18.8,z:5}} rotation={{x:10,y:31,z:3}}/>
  <Syn position={{x:25,y:16.4,z:14}} rotation={{x:16,y:43,z:-11}}/>
  <Capsule position={{x:-2,y:24,z:6}} rotation={{x:3,y:-180,z:3}}/>
 
  <mesh scale={1} rotation={[(Math.PI/180)*10,(Math.PI/180)*-100,(Math.PI/180)*0]}>
      <primitive object={nodesloader.Main} />
  </mesh>
  <spotLight
        ref={spotlightref1}
        color="#FFD7D7"
        intensity={0.15}
        position={[30, 100,-20]}  
        penumbra={1}
        angle={(Math.PI/180)*40}
        distance={400}
        castShadow={false} 
      />
    <spotLight
        ref={spotlightref2}
        color="#ffffff"
        intensity={1.8}
        position={[60, 50,30]}  
        penumbra={1}
        angle={(Math.PI/180)*40}
        distance={90}
        castShadow={false} 
      />
      <spotLight
        ref={spotlightref3}
        color="#ffffff"
        intensity={2}
        position={[-60, 50,20]}  
        penumbra={1}
        angle={(Math.PI/180)*40}
        distance={80}
        castShadow={false} 
      />
      <spotLight
        ref={spotlightref4}
        color="#ffffff"
        intensity={1.5}
        position={[5, 55,80]}
        penumbra={1}
        angle={(Math.PI/180)*40}
        distance={160}
        castShadow={false} 
        target={object}       
      />
  </group>
  
  </>
  )
}
