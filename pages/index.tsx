import Head from 'next/head'
import mesh from "react-three-fiber"
import styles from '@/styles/Home.module.css'
import { Canvas,useThree } from 'react-three-fiber'
import { Suspense, useEffect, useRef, useState } from "react";
import { useFrame, useLoader } from "@react-three/fiber";
import { FBXLoader} from "three/examples/jsm/loaders/FBXLoader.js";
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';
import { Environment, OrbitControls, useAnimations,Html, Stats, TransformControls,PerspectiveCamera, PivotControls } from "@react-three/drei";
import { useFBX,useGLTF } from '@react-three/drei';
import * as THREE from "three";
import { Build } from '@/components/building';
import { Safe } from '@/components/safe';
import { Syn } from '@/components/syn';
import { Capsule } from '@/components/capsule';
export default  function Home() {
  const [ destination,setdestination ] = useState(() => new THREE.Vector3(5,20,80))
  const [items,setitems] = useState(0)
  const set0 = () =>{
    setdestination(() => new THREE.Vector3(5,20,80))
    setitems(0)
  }
  useEffect(()=>{
  },[])
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
     <div className='bg-black w-[100vw] h-[100vh]'>
     {/* <button onClick={()=>set0()} className='bg-[#000000] flex justify-center items-center bg-opacity-50 transition-all hover:bg-opacity-100 hover:border-yellow-400 hover:text-yellow-400 w-[60px] h-[60px]  border-2 rounded-[50%] absolute top-[10vw] right-[10vw] z-30'>
              <a className='text-white text-5xl mb-3'>x</a>
      </button> */}
      <div className='w-full h-full z-20'>
      <Canvas >
        {/* <PerspectiveCamera makeDefault={true}  position={[0,10,20]}/> */}
        {/* <PerspectiveCamera makeDefault={true} position={[position.x,position.y,15]} rotation={[-0.5,0,0]} /> */}
        {/* <Scene/> */}
        <Suspense fallback={null}>
        <ambientLight intensity={0} />
        <directionalLight intensity={0}/>
        <directionalLight intensity={0} position={[2,1,3]}/>
          {/* <Box/> */}
          <Island setdestination={setdestination} destination={destination} setitems={setitems} items={items} />
          <Syn position={{x:25,y:16.4,z:14}} rotation={{x:16,y:43,z:-11}}/>
          <Build position={{x:14,y:25.8,z:8}} rotation={{x:8,y:260,z:-2}}/>
          <Safe position={{x:-13,y:18.8,z:5}} rotation={{x:10,y:31,z:3}}/>
          <Capsule position={{x:-2,y:24,z:6}} rotation={{x:3,y:-180,z:3}}/>
        {/* <OrbitControls enableRotate={true} enableZoom={true} enabled={true}
         minDistance={40}
         maxDistance={80}/> */}
        </Suspense>
      </Canvas>
      </div>
     </div>
    </>
  )
}
const Island = ({
  destination,
  setdestination,
  setitems,
  items
}:
{
  destination:any,
  setdestination:any
  setitems:any,
  items:any
}) =>{
  const cameraref=useRef<any>()
  const glb = useGLTF("island3.glb");
  const node = useLoader(GLTFLoader, 'island3.glb');
  const ref2 = useRef<any>()
  const pos1 = useRef<any>()
  const pos2 = useRef<any>()
  const pos3 = useRef<any>()
  const pos4 = useRef<any>()
  const pos5 = useRef<any>()
  let pos ={x:0,y:0,z:60} 
  let rotatedeg={x:0,y:0,z:0}
  const [ smoothedCameraPosition ] = useState(() => new THREE.Vector3(0,20,60))
  const set0 = () =>{
    setdestination(() => new THREE.Vector3(5,20,80))
    setitems(0)
  }
  const movetosyn= () =>{
    setdestination(() => new THREE.Vector3(32,20,34))
    setitems(1)
  }
  const movetobuild= () =>{
    setdestination(() => new THREE.Vector3(19,27,30))
    setitems(2)
  }
  const movetoegg= () =>{
    setdestination(() => new THREE.Vector3(9,20,31))
    setitems(5)
  }
  const movetosafe= () =>{
    setdestination(() => new THREE.Vector3(-10,20,23))
    setitems(4)
  }
  const movetocapsule= () =>{
    setdestination(() => new THREE.Vector3(0.9,25,25))
    setitems(3)
  }
  // const cameraposition = new THREE.Vector3()
  // cameraposition.set(0,0,50)
  // const updatecam1 = () =>{
  //   cameraposition.set(0,11,50)
  // }
  useEffect(()=>{
    console.log(node)
  },[pos])
  useFrame((state, delta) => {
    smoothedCameraPosition.lerp(destination, 0.04)
    cameraref.current.position.copy(smoothedCameraPosition)
  });
  const object = new THREE.Object3D();
  object.position.set(4,24,0)
  
  return(
  <>
  <PerspectiveCamera makeDefault={true} position={[0,0,0]} rotation={[0,0,0]} ref={cameraref} />
  <group position={[0,0,0]}>
  <mesh scale={1} ref={ref2} rotation={[(Math.PI/180)*10,(Math.PI/180)*-100,0]}  >
      {/* <TransformControls object={ref2}/> */}
      <primitive object={node.nodes.Main} />
  </mesh>
     <mesh ref={pos5}  position={[4.1,21,7]}   >    
        <Html center={true} distanceFactor={70} >
        <div className='flex'>
          {items==0?(<button onClick={()=>movetoegg()} className='bg-[#000000] bg-opacity-50 transition-all hover:bg-opacity-100 hover:border-yellow-400 hover:text-yellow-400 w-[40px] h-[40px]  border-2 rounded-[50%]'>
              <a className='text-white text-2xl'>5</a>
            </button>):(null)}
            {items==5?(
            <div className='flex flex-col ml-[270px] mt-[80px]'>
            <div className='flex justify-end'>
              <button onClick={()=>set0()} className='bg-[#000000] bg-opacity-50 transition-all hover:bg-opacity-100 hover:border-yellow-400 hover:text-yellow-400 w-[20px] h-[20px]  border-[1px] rounded-[50%] flex justify-center items-center'>
                <a className='text-white text-[10px] text-center mb-[1px]'>x</a>
              </button>
            </div>
            <div className=' w-[80px] h-[120px] bg-black bg-opacity-90 rounded-[10px] border-[1px] border-yellow-400 flex flex-col justify-start py-[10px] items-center '>
              <p className='text-[8px] text-yellow-500 '>SACRED BEAST</p>
              <div className='bg-yellow-500 h-[1px] w-[80%] mt-2'></div>
              <p className='text-red-600 text-left text-[4px] px-[5px] mt-2 indent-[10px]'>{"If you have money buy it, feed it, hatch it and you will recieve some random shit I mean sacred beast that will follow you around forever untill the end of time lorem ipsum..."}</p>
            </div>
            </div>):(null)}
            </div>
        </Html>
      </mesh> 
      <mesh ref={pos3}  position={[-2,31,0.9]}   >    
        <Html center={true} distanceFactor={70} >
          <div className='flex'>
          {items==0?(<button onClick={()=>movetocapsule()} className='bg-[#000000] bg-opacity-50 transition-all hover:bg-opacity-100 hover:border-yellow-400 hover:text-yellow-400 w-[40px] h-[40px]  border-2 rounded-[50%]'>
              <a className='text-white text-2xl'>3</a>
            </button>):(null)}
            {items==3?(
            <div className='flex flex-col ml-[300px] mt-[80px]'>
            <div className='flex justify-end'>
              <button onClick={()=>set0()} className='bg-[#000000] bg-opacity-50 transition-all hover:bg-opacity-100 hover:border-yellow-400 hover:text-yellow-400 w-[20px] h-[20px]  border-[1px] rounded-[50%] flex justify-center items-center'>
                <a className='text-white text-[10px] text-center mb-[1px]'>x</a>
              </button>
            </div>
            <div className=' w-[80px] h-[120px] bg-black bg-opacity-90 rounded-[10px] border-[1px] border-yellow-400 flex flex-col justify-start py-[10px] items-center '>
              <p className='text-[8px] text-yellow-500 '>CAPSULE</p>
              <div className='bg-yellow-500 h-[1px] w-[80%] mt-2'></div>
              <p className='text-red-600 text-left text-[4px] px-[5px] mt-2 indent-[10px]'>{"Basicly it's fucking lottery that most poeple buy and prey to get something more value than the price of capsule it self but as you all know the percentage is fucking low. So if you want anything buy it on marketplace you stupid price of shit dont buy fucking capsule you coward. lorem ipsum... "}</p>
            </div>
            </div>):(null)}
            </div>
        </Html>
      </mesh> 
      <mesh ref={pos4}  position={[-13.5,25.5,2]}   >    
        <Html center={true} distanceFactor={70} >
        <div className='flex'>
          {items==0?(<button onClick={()=>movetosafe()} className='bg-[#000000] bg-opacity-50 transition-all hover:bg-opacity-100 hover:border-yellow-400 hover:text-yellow-400 w-[40px] h-[40px]  border-2 rounded-[50%]'>
              <a className='text-white text-2xl'>4</a>
            </button>):(null)}
            {items==4?(
            <div className='flex flex-col ml-[320px] mt-[120px]'>
            <div className='flex justify-end'>
              <button onClick={()=>set0()} className='bg-[#000000] bg-opacity-50 transition-all hover:bg-opacity-100 hover:border-yellow-400 hover:text-yellow-400 w-[20px] h-[20px]  border-[1px] rounded-[50%] flex justify-center items-center'>
                <a className='text-white text-[10px] text-center mb-[1px]'>x</a>
              </button>
            </div>
            <div className=' w-[80px] h-[120px] bg-black bg-opacity-90 rounded-[10px] border-[1px] border-yellow-400 flex flex-col justify-start py-[10px] items-center '>
              <p className='text-[8px] text-yellow-500 '>EVERMOON SAFE</p>
              <div className='bg-yellow-500 h-[1px] w-[80%] mt-2'></div>
              <p className='text-red-600 text-left text-[4px] px-[5px] mt-2 indent-[10px]'>{"safe that contain evermoon token and so much much much much much much much much much much much much much much much much much much much much much much much much  much much much much much much much much much much much much much much much much much much much much much much much much  more "}</p>
            </div>
            </div>):(null)}
            </div>
        </Html>
      </mesh> 
      <mesh ref={pos1}  position={[27,22,15]}   >    
        <Html center={true} distanceFactor={70} >
        <div className='flex'>
          {items==0?(<button onClick={()=>movetosyn()} className='bg-[#000000] bg-opacity-50 transition-all hover:bg-opacity-100 hover:border-yellow-400 hover:text-yellow-400 w-[40px] h-[40px]  border-2 rounded-[50%]'>
              <a className='text-white text-2xl'>1</a>
            </button>):(null)}
            {items==1?(
            <div className='flex flex-col ml-[300px] mt-[80px]'>
            <div className='flex justify-end'>
              <button onClick={()=>set0()} className='bg-[#000000] bg-opacity-50 transition-all hover:bg-opacity-100 hover:border-yellow-400 hover:text-yellow-400 w-[20px] h-[20px]  border-[1px] rounded-[50%] flex justify-center items-center'>
                <a className='text-white text-[10px] text-center mb-[1px]'>x</a>
              </button>
            </div>
            <div className=' w-[80px] h-[120px] bg-black bg-opacity-90 rounded-[10px] border-[1px] border-yellow-400 flex flex-col justify-start py-[10px] items-center '>
              <p className='text-[8px] text-yellow-500 '>SYSTESIS</p>
              <div className='bg-yellow-500 h-[1px] w-[80%] mt-2'></div>
              <p className='text-red-600 text-left text-[4px] px-[5px] mt-2 indent-[10px]'>{"Our game had rune so you can use that same rune to systhesis and get better version of that rune back it no risk but yea you have to spend a lot of money to buy a lot of rune if you wanna be completitive so stop crying and get rich. Lorem ipsum...."}</p>
            </div>
            </div>):(null)}
            </div>
        </Html>
      </mesh> 
      <mesh ref={pos2}  position={[15,31,6]}   >    
        <Html center={true} distanceFactor={70} >
        <div className='flex'>
          {items==0?(<button onClick={()=>movetobuild()} className='bg-[#000000] bg-opacity-50 transition-all hover:bg-opacity-100 hover:border-yellow-400 hover:text-yellow-400 w-[40px] h-[40px]  border-2 rounded-[50%]'>
              <a className='text-white text-2xl'>2</a>
            </button>):(null)}
            {items==2?(
            <div className='flex flex-col ml-[300px] mt-[140px]'>
            <div className='flex justify-end'>
              <button onClick={()=>set0()} className='bg-[#000000] bg-opacity-50 transition-all hover:bg-opacity-100 hover:border-yellow-400 hover:text-yellow-400 w-[20px] h-[20px]  border-[1px] rounded-[50%] flex justify-center items-center'>
                <a className='text-white text-[10px] text-center mb-[1px]'>x</a>
              </button>
            </div>
            <div className=' w-[80px] h-[120px] bg-black bg-opacity-90 rounded-[10px] border-[1px] border-yellow-400 flex flex-col justify-start py-[10px] items-center '>
              <p className='text-[8px] text-yellow-500 '>Building Challenge</p>
              <div className='bg-yellow-500 h-[1px] w-[80%] mt-2'></div>
              <p className='text-red-600 text-left text-[4px] px-[5px] mt-2 indent-[10px]'>{"you can use your 19 unuse hero or skin to sacrifice and become something more value (if you lucky) but most of the time trust me you will get something useless or even fail and get nothing. So if you dont want that hero or skin and you coward to gamble just sell it your numpnut. lorem ipsum... "}</p>
            </div>
            </div>):(null)}
            </div>
        </Html>
      </mesh> 
  {/* <TransformControls object={pos2}/> */}
  </group>
  <spotLight

        color="#FFD7D7"
        intensity={0.15}
        position={[30, 100,-20]}  
        penumbra={1}
        angle={(Math.PI/180)*40}
        distance={400}
        castShadow={false} 
      />
    <spotLight

        color="#ffffff"
        intensity={1.8}
        position={[60, 50,30]}  
        penumbra={1}
        angle={(Math.PI/180)*40}
        distance={90}
        castShadow={false} 
      />
      <spotLight
 
        color="#ffffff"
        intensity={2}
        position={[-60, 50,20]}  
        penumbra={1}
        angle={(Math.PI/180)*40}
        distance={80}
        castShadow={false} 
      />
      <spotLight

        color="#ffffff"
        intensity={1.5}
        position={[5, 55,80]}
        penumbra={1}
        angle={(Math.PI/180)*40}
        distance={160}
        castShadow={false} 
        target={object}
        
      />
  </>
  )
}