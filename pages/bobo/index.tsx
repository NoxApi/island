import Head from 'next/head'
import mesh from "react-three-fiber"
import styles from '@/styles/Home.module.css'
import { Canvas,useThree } from 'react-three-fiber'
import { Suspense, useEffect, useRef, useState } from "react";
import { useFrame, useLoader } from "@react-three/fiber";
import { FBXLoader} from "three/examples/jsm/loaders/FBXLoader.js";
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';
import { Environment, OrbitControls, useAnimations,Html, Stats, TransformControls,PerspectiveCamera, PivotControls } from "@react-three/drei";
import { useFBX,useGLTF } from '@react-three/drei';
import { useControls } from 'leva';
import * as THREE from "three";
import { Camera } from 'three';
export default function Home() {
  const [camerap,setcamerap] = useState({x:80,y:70,z:0})
  
  const camera1 = () =>{
    setcamerap({x:1,y:6,z:1.3})
  }
  const camera2 = () =>{
    setcamerap({x:-0.01,y:10,z:3})
  }
  const { position } = useControls({
    position:
    {
        value: { x: 0, y: 0 },
        step: 0.1
    }
})
  useEffect(()=>{
  },[])
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
     <div className='bg-red-300 w-[100vw] h-[100vh]'>
      <Canvas >
        {/* <PerspectiveCamera makeDefault={true}  position={[0,10,20]}/> */}
        {/* <PerspectiveCamera makeDefault={true} position={[position.x,position.y,15]} rotation={[-0.5,0,0]} /> */}
        {/* <Scene/> */}
        <Suspense fallback={null}>
        <ambientLight intensity={1} />
        <directionalLight intensity={1}/>
          {/* <Box/> */}
          <Island/>
        <OrbitControls />
        </Suspense>
      </Canvas>
     </div>
    </>
  )
}
const Island = () =>{
  
  const ref2 = useRef()
  const ref3 = useRef()
  const ref4 = useRef()
  const ref5 = useRef()
  const ref6 = useRef()
  const glb = useGLTF("robo/1.glb");
  const glb2 = useGLTF("robo/2.glb");
  const glb3 = useGLTF("robo/3.glb");
  const glb4 = useGLTF("robo/4.glb");
  const glb5 = useGLTF("robo/5.glb");
  const glb6 = useGLTF("robo/6.glb");
  const glb8 = useGLTF("robo/8.glb");
  const glb7 = useGLTF("robo/7.glb");
  
  const animate2 = useAnimations(glb2.animations,ref2)
  const animate3 = useAnimations(glb7.animations,ref3)
  const animate4 = useAnimations(glb4.animations,ref4)
  const animate5 = useAnimations(glb5.animations,ref5)
  const animate6 = useAnimations(glb6.animations,ref6)
  // const mixer = new THREE.AnimationMixer(glb)
  // void mixer.clipAction(glb.animations[0]).play();
  useFrame((state, delta) => {
    // updatecam1()
  });
  useEffect(()=>{
    // actions["All Animations"]?.play()
    animate2.actions.Building_ArmRotor_Animate_Anim_0?.play()
    // animate3.actions.Animation?.play()
    animate4.actions.Building_LowerRotor_Animate_Anim_0?.play()
    animate5.actions.Building_Sphere_Animate_Anim_0?.play()
    animate6.actions.Building_UpperRotor_Animate_Anim_0?.play()
    console.log(animate3)
  })
  return(
  <>
  <mesh ref={ref3} position={[0,0,0]} >
      <primitive object={glb7.nodes.Cylinder} />
  </mesh>
<group position={[1,-0.5,21]}>
  <mesh  position={[0,-20,0]} >
      {/* <TransformControls object={ref2}/> */}
      <primitive object={glb.nodes.Main} />
</mesh>
  <mesh ref={ref2}  position={[0,-20,0]} >
      {/* <TransformControls object={ref2}/> */}
      <primitive object={glb2.nodes.Main} />
  </mesh>
  
  <mesh ref={ref4} position={[0,-20,0]} >
      {/* <TransformControls object={ref2}/> */}
      <primitive object={glb4.nodes.Main} />
  </mesh>
  <mesh ref={ref5} position={[0,-20,0]} >
      <primitive object={glb5.nodes.Main} />
  </mesh>
  <mesh ref={ref6} position={[0,-20,0]} >
      <primitive object={glb6.nodes.Main} />
  </mesh>
  <mesh position={[0,-20,0]}>
  </mesh>
  <mesh position={[0,-20,0]}>
    {/* <primitive object={glb8.nodes.Main} /> */}
  </mesh>
</group> 
  {/* <TransformControls object={pos2}/> */}
  </>
  )
}
// const Box = () =>{
//     const nodesloader = useLoader(GLTFLoader, 'glb1.glb')['nodes'];
//     const glb = useGLTF("glb3.glb");
//     const ref = useRef()
    
    
//     const {actions} = useAnimations(glb.animations,ref)
//     // const mixer = new THREE.AnimationMixer(glb)
//     // void mixer.clipAction(glb.animations[0]).play();
//     useFrame((state, delta) => {
//       // mixer.update(delta);
//     });
//     const inner = new THREE.Mesh(glb.nodes.InnerCube.geometry,glb.materials.aiStandardSurface1)

//     useEffect(()=>{
//       console.log(glb)
//       console.log(actions["All Animations"])
//       actions["All Animations"]?.play()
//     })
//     return(
//     <>
//     <group ref={ref} >
//         <primitive object={glb.nodes.OuterCube} />
//         {/* <mesh castShadow receiveShadow geometry={glb.nodes.InnerCube.geometry} material={glb.materials.aiStandardSurface1}>
//         </mesh> */}
//         {/* <group castShadow receiveShadow ge>
//         </mesh> */}
//         <primitive object={inner} />
//     </group>
    
//     </>
//     )
// }


// function Scene() {
//   // const gltf = useLoader(GLTFLoader, 'glb1.glb')
  
  
//   return (
//     <Canvas />
//   );
// };
// }