import { useThree, useFrame,Canvas,useLoader } from "react-three-fiber";
import { Vector3, Euler,Camera, HemisphereLight, PointLightHelper,SpotLight, SpotLightHelper, RectAreaLight, Vector} from "three";
import { useEffect, useRef ,useState,Suspense} from "react";
import Head from 'next/head'
import mesh from "react-three-fiber"
import styles from '@/styles/Home.module.css'
import { FBXLoader} from "three/examples/jsm/loaders/FBXLoader.js";
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';
import { Environment, OrbitControls, useAnimations,Html, Stats, TransformControls,PerspectiveCamera, PivotControls, useHelper, Point } from "@react-three/drei";
import { useFBX,useGLTF } from '@react-three/drei';
import * as THREE from "three";
import * as Gui from "lil-gui";
import { Build } from '@/components/building';
import { Safe } from '@/components/safe';
import { Syn } from '@/components/syn';
import { Capsule } from "@/components/capsule";
import firestore from "@/firebase/ClientApp";
import {collection,QueryDocumentSnapshot,DocumentData,query,where,limit,getDocs,addDoc,updateDoc, doc} from "@firebase/firestore";

 
export default function Home() {
  const [message, setMessage] = useState("nomsg");
  
  let spotlight: { angle: any; x?: number; y?: number; z?: number; tx?: number; ty?: number; tz?: number; penum?: number; inten?: number; d?: number; } | null=null
  let colorFormats : {string :any}| null=null
    spotlight = {
      x:5,
      y:55,
      z:80,
      tx:0,
      ty:0,
      tz:0,
      penum:1,
      inten:1.5,
      d:160,
      angle:40}
      colorFormats = {string:"#FFFFFF"}
  const update = async () => {
    try {
      const spolight1 = collection(firestore as any,'spotlight1');
      addDoc(spolight1,{
        angle : (spotlight!.angle)!.toString(),
        color : (colorFormats!.string)!.toString(),
        distance: (spotlight!.d)!.toString(),
        intensity: (spotlight!.inten)!.toString(),
        penumbra: (spotlight!.penum)!.toString(),
        posx: (spotlight!.x)!.toString(),
        posy: (spotlight!.y)!.toString(),
        posz: (spotlight!.z)!.toString(),
        targetx: (spotlight!.tx)!.toString(),
        targety: (spotlight!.ty)!.toString(),
        targetz: (spotlight!.tz)!.toString(),
      });
      // Set a success message
      setMessage("save เสดแล้วไอ่สัส click สี่เหลี่ยมนี้เพื่อปิด");
    } catch (error) {
      // Set an error message
      setMessage("update ผิดพลาด เสดแล้วไอ่สัส เกิดปัญหาอะดิ๊ click สี่เหลี่ยมนี้เพื่อปิด");
    }
  };
  useEffect(()=>{ 
    },[])
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
     <div className='bg-black w-[100vw] h-[100vh]  '>
      <button onClick={()=>update()} className="w-60 h-20 bg-slate-400 bg-opacity-20 absolute bottom-[1vw] left-[1vw] z-40 rounded-xl border-4 border-teal-200">
        <p className="text-xl text-teal-200">{"Add Spotlight"}</p>
      </button>
      {message=="nomsg"?(null):(<button onClick={()=>setMessage("nomsg")} className="w-[50vw] h-[20vw] bg-slate-400 bg-opacity-20 absolute bottom-[50%] left-[50%] translate-x-[-50%] translate-y-[50%] z-40 rounded-xl border-4 border-teal-200">
        <p className="text-4xl text-teal-200">{message}</p>
      </button>)}     
      <Canvas >
        <Suspense fallback={null}>
        </Suspense>
      </Canvas>
     </div>

    </>
  )
}


