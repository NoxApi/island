import Head from 'next/head'
import mesh from "react-three-fiber"
import styles from '@/styles/Home.module.css'
import { Canvas,useThree } from 'react-three-fiber'
import { Suspense, useEffect, useRef, useState } from "react";
import { useFrame, useLoader } from "@react-three/fiber";
import { FBXLoader} from "three/examples/jsm/loaders/FBXLoader.js";
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';
import { Environment, OrbitControls, useAnimations,Html, Stats, TransformControls,PerspectiveCamera, PivotControls } from "@react-three/drei";
import { useFBX,useGLTF } from '@react-three/drei';
import { useControls } from 'leva';
import * as THREE from "three";
export default function Home() {
  const [ desination,setdestination] = useState(() => new THREE.Vector3(0,40,60))
  const [items,setitems] = useState(0)
  const set0 = () =>{
    setdestination(() => new THREE.Vector3(0,40,60))
    setitems(0)
  }
  useEffect(()=>{
  },[])
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
     <div className='bg-red-300 w-[100vw] h-[100vh]'>
     <button onClick={()=>set0()} className='w-[60px] h-[60px] bg-black bg-opacity-50 flex justify-center items-end border-2 border-black rounded-full top-[1vw] right-[1vw] z-30 absolute'>
                <p className='text-[50px] text-black mt-12'>{"x"}</p>
      </button>
      <Canvas >
        {/* <PerspectiveCamera makeDefault={true}  position={[0,10,20]}/> */}
        {/* <PerspectiveCamera makeDefault={true} position={[position.x,position.y,15]} rotation={[-0.5,0,0]} /> */}
        {/* <Scene/> */}
        <Suspense fallback={null}>
        <ambientLight intensity={0.5} />
        <directionalLight intensity={0.3}/>
          {/* <Box/> */}
          <Camera des={desination} setdes={setdestination} setitems={setitems}/>
        <OrbitControls enableRotate={true} enableZoom={true} enabled={true}
         minDistance={40}
         maxDistance={80}/>
        </Suspense>
      </Canvas>
     </div>
    </>
  )
}
const Island = ({
  des,
  setdes,
  setitems
}:
{
  des:any,
  setdes:any
  setitems:any
}) =>{
  
  
  const nodesloader = useLoader(GLTFLoader, 'island.glb')['nodes'];
  const glb = useGLTF("island.glb");
  const ref2 = useRef()
  const pos1 = useRef()
  const pos2 = useRef()
  const pos3 = useRef()
  const pos4 = useRef()
  const pos5 = useRef()

  const cameraposition = new THREE.Vector3()
  cameraposition.set(0,11,50)
  // const {actions} = useAnimations(glb.animations,ref2)
  // const mixer = new THREE.AnimationMixer(glb)
  // void mixer.clipAction(glb.animations[0]).play();
  const updatecam1 = () =>{
    cameraposition.set(0,11,50)
  }
  const moveto1= () =>{
    setdes(() => new THREE.Vector3(8.5,4,70))
    setitems(1)
  }
  const moveto2= () =>{
    setdes(() => new THREE.Vector3(0,4,70))
    setitems(2)
  }
  useFrame((state, delta) => {
    updatecam1()
  });
  useEffect(()=>{
    // actions["All Animations"]?.play()
    console.log(glb)
    console.log(nodesloader)
  })
  return(
  <>
  <PerspectiveCamera makeDefault={true} position={cameraposition} rotation={[-0.5,0,0]} />
  <group position={[0,-15,0]}>
  <mesh scale={1} ref={ref2} rotation={[0,Math.PI*1.55,0]}  >
      {/* <TransformControls object={ref2}/> */}
      <primitive object={nodesloader.Main} />
  </mesh>
     <mesh ref={pos5}  position={[4.1,21,7]}   >    
        <Html center={true} distanceFactor={60} >
            <button onClick={()=>null} className='bg-[#000000] bg-opacity-50 transition-all hover:bg-opacity-100 hover:border-yellow-400 hover:text-yellow-400 w-[40px] h-[40px]  border-2 rounded-[50%]'>
              <a className='text-white text-2xl'>5</a>
            </button>
        </Html>
      </mesh> 
      <mesh ref={pos3}  position={[-4.9,27,0.9]}   >    
        <Html center={true} distanceFactor={60} >
            <button onClick={()=>null} className='bg-[#000000] bg-opacity-50 transition-all hover:bg-opacity-100 hover:border-yellow-400 hover:text-yellow-400 w-[40px] h-[40px]  border-2 rounded-[50%]'>
              <a className='text-white text-2xl'>3</a>
            </button>
        </Html>
      </mesh> 
      <mesh ref={pos4}  position={[-14.5,24,3.4]}   >    
        <Html center={true} distanceFactor={60} >
            <button onClick={()=>null} className='bg-[#000000] bg-opacity-50 transition-all hover:bg-opacity-100 hover:border-yellow-400 hover:text-yellow-400 w-[40px] h-[40px]  border-2 rounded-[50%]'>
              <a className='text-white text-2xl'>4</a>
            </button>
        </Html>
      </mesh> 
      <mesh ref={pos1}  position={[24.6,23,3.4]}   >    
        <Html center={true} distanceFactor={60} >
            <button onClick={()=>updatecam1()} className='bg-[#000000] bg-opacity-50 transition-all hover:bg-opacity-100 hover:border-yellow-400 hover:text-yellow-400 w-[40px] h-[40px]  border-2 rounded-[50%]'>
              <a className='text-white text-2xl'>1</a>
            </button>
        </Html>
      </mesh> 
      <mesh ref={pos2}  position={[12.21,29,-3]}   >    
        <Html center={true} distanceFactor={60} >
            <button onClick={()=>null} className='bg-[#000000] bg-opacity-50 transition-all hover:bg-opacity-100 hover:border-yellow-400 hover:text-yellow-400 w-[40px] h-[40px]  border-2 rounded-[50%]'>
              <a className='text-white text-2xl'>2</a>
            </button>
        </Html>
      </mesh> 
  {/* <TransformControls object={pos2}/> */}
  </group>
  </>
  )
}
const Camera = ({
  des,
  setdes,
  setitems
}:
{
  des:any,
  setdes:any
  setitems:any
}) => {
  const [ smoothedCameraPosition ] = useState(() => new THREE.Vector3(0,40,60))

  
  const camera = useRef();
  useFrame((state, delta) => {
    smoothedCameraPosition.lerp(des, 0.07)
    state.camera.position.copy(smoothedCameraPosition)
  });
  return (
    <perspectiveCamera
      ref={camera}
      fov={75}
      near={0.1}
      position={new THREE.Vector3(0,40,60)}
      far={100}
    > 
      <mesh rotation={[0,(Math.PI/180)*230,0]}>
      </mesh>
      <mesh rotation={[0,(Math.PI/180)*230,0]} position={[-8,0,0]}>
      </mesh>
      <Island des={des} setdes={setdes} setitems={setitems}/>
    </perspectiveCamera>
  );
};